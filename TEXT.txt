Creating a code solution for the described ConsumeWise system would involve multiple components, including data collection, verification, personalization, and a user interface. Below is a basic architectural approach in code snippets. Since this is a high-level solution, we'll focus on key aspects:

### 1. **Data Collection (API to gather product information)**
To collect product data from public sources or producers, we could start with a Python-based API interface to gather data from various sources.

```python
import requests

def fetch_product_data(product_id):
    # Mock API to fetch product details from public database or producer
    url = f"https://api.publicdatasource.com/products/{product_id}"
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception("Failed to fetch product data")

# Example usage
product_data = fetch_product_data(12345)
print(product_data)
```

### 2. **Data Verification (Blockchain for data integrity)**
A decentralized method like blockchain can be used to ensure the data cannot be tampered with. Here’s a simplified blockchain example for data verification:

```python
import hashlib
import json
from time import time

class Blockchain:
    def __init__(self):
        self.chain = []
        self.pending_data = []
        self.create_block(previous_hash="0")

    def create_block(self, previous_hash):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': time(),
            'data': self.pending_data,
            'previous_hash': previous_hash,
            'hash': self.hash_block(previous_hash)
        }
        self.pending_data = []
        self.chain.append(block)
        return block

    def add_data(self, data):
        self.pending_data.append(data)

    def hash_block(self, previous_hash):
        block_string = json.dumps(self.pending_data, sort_keys=True).encode()
        return hashlib.sha256(block_string + previous_hash.encode()).hexdigest()

# Example usage
blockchain = Blockchain()
blockchain.add_data(product_data)
blockchain.create_block(previous_hash="previous_hash_example")
print(blockchain.chain)
```

### 3. **Personalized Recommendations (Simple Recommendation Engine)**
You can use a recommendation engine based on the user’s preferences and shopping history. Here’s a basic system that recommends sustainable products based on user data:

```python
user_preferences = {
    'eco_friendly': True,
    'organic': True,
    'max_price': 500
}

products = [
    {'name': 'Product A', 'eco_friendly': True, 'organic': False, 'price': 300},
    {'name': 'Product B', 'eco_friendly': True, 'organic': True, 'price': 450},
    {'name': 'Product C', 'eco_friendly': False, 'organic': True, 'price': 600},
]

def recommend_products(user_prefs, product_list):
    recommendations = []
    for product in product_list:
        if (user_prefs['eco_friendly'] and product['eco_friendly']) and \
           (user_prefs['organic'] and product['organic']) and \
           (product['price'] <= user_prefs['max_price']):
            recommendations.append(product['name'])
    return recommendations

# Example usage
recommendations = recommend_products(user_preferences, products)
print("Recommended Products:", recommendations)
```

### 4. **User-Friendly Interface (Simple Flask Web App)**
We can create a web-based interface using Python's Flask framework to show personalized recommendations to users.

```python
from flask import Flask, render_template, request

app = Flask(__name__)

# Example user preferences
user_preferences = {
    'eco_friendly': True,
    'organic': True,
    'max_price': 500
}

# Example product data
products = [
    {'name': 'Product A', 'eco_friendly': True, 'organic': False, 'price': 300},
    {'name': 'Product B', 'eco_friendly': True, 'organic': True, 'price': 450},
    {'name': 'Product C', 'eco_friendly': False, 'organic': True, 'price': 600},
]

@app.route('/')
def home():
    return render_template('index.html', products=products)

@app.route('/recommendations', methods=['POST'])
def recommendations():
    # Get user preferences from form
    eco_friendly = request.form.get('eco_friendly') == 'on'
    organic = request.form.get('organic') == 'on'
    max_price = int(request.form.get('max_price'))
    
    # Update user preferences
    user_preferences.update({
        'eco_friendly': eco_friendly,
        'organic': organic,
        'max_price': max_price
    })

    # Find recommended products
    recommended_products = []
    for product in products:
        if (user_preferences['eco_friendly'] and product['eco_friendly']) and \
           (user_preferences['organic'] and product['organic']) and \
           (product['price'] <= user_preferences['max_price']):
            recommended_products.append(product['name'])
    
    return render_template('recommendations.html', recommendations=recommended_products)

if __name__ == '__main__':
    app.run(debug=True)
```

#### **`index.html` (Template)**
```html
<!DOCTYPE html>
<html>
<head>
    <title>ConsumeWise</title>
</head>
<body>
    <h1>Product Recommendations</h1>
    <form action="/recommendations" method="post">
        <label>
            <input type="checkbox" name="eco_friendly"> Eco-Friendly
        </label><br>
        <label>
            <input type="checkbox" name="organic"> Organic
        </label><br>
        <label>
            Max Price: <input type="text" name="max_price">
        </label><br>
        <button type="submit">Get Recommendations</button>
    </form>
</body>
</html>
```

#### **`recommendations.html` (Template)**
```html
<!DOCTYPE html>
<html>
<head>
    <title>ConsumeWise</title>
</head>
<body>
    <h1>Recommended Products</h1>
    <ul>
        {% for product in recommendations %}
        <li>{{ product }}</li>
        {% endfor %}
    </ul>
</body>
</html>
```

### 5. **Real-Time Nudges (Browser Extension Integration)**
To deliver real-time nudges, you would integrate with a browser extension or mobile app. Here's an example of using a JavaScript-based browser extension to show nudges during an e-commerce purchase:

```javascript
chrome.webNavigation.onCompleted.addListener(function(details) {
    const productDetails = extractProductDetails(details.url);
    const recommendation = fetchRecommendation(productDetails);
    
    if (recommendation.isSustainable) {
        alert('This product is sustainable and eco-friendly!');
    } else {
        alert('Consider a more eco-friendly alternative.');
    }
});

function extractProductDetails(url) {
    // Simple mock to extract product details from a URL
    return {
        name: "Product A",
        eco_friendly: true
    };
}

function fetchRecommendation(product) {
    // Mock API request to ConsumeWise backend
    return product;  // Replace with API call
}
```

### Final Thoughts:
This is a basic framework for developing the ConsumeWise solution. Each component—data collection, verification, personalization, and interface—can be expanded and integrated into a larger system.
